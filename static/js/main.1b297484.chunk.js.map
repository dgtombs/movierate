{"version":3,"sources":["domain/Movie.ts","utils/sorting.ts","components/ConfigContext.ts","components/MovieDetails/index.tsx","components/LoadedApp.tsx","components/App.tsx","api/api.ts","reportWebVitals.ts","index.tsx"],"names":["DEFAULT_RATING_TEXTS","renderRating","movie","String","rating","ratingText","stringSorter","a","b","ConfigContext","React","createContext","title","introduction","Text","Typography","Title","TestIds","MovieDetails","_ref","onClose","_jsxs","className","children","level","year","_jsx","Button","type","onClick","CloseOutlined","director","ReactMarkdown","review","moment","rateDate","format","Introduction","config","useContext","LoadedApp","moviesData","movies","_useState","useState","_useState2","_slicedToArray","selectedMovie","setSelectedMovie","useEffect","document","columns","dataIndex","sorter","defaultSortOrder","render","_","splice","Provider","value","Table","dataSource","rowKey","record","onRow","href","src","alt","App","loading","setLoading","_useState3","_useState4","moviesResponse","setMoviesResponse","fetch","then","response","json","finally","_Fragment","Spin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1b297484.chunk.js","sourcesContent":["interface Movie {\n    title: string;\n    year: string;\n    director: string;\n    // Date of the rating on YYYY-MM-DD format.\n    // I leave it in this format since it is sortable.\n    rateDate: string;\n    rating: Rating;\n    // If present, overrides the default text for the rating.\n    ratingText?: string;\n    // Markdown supported here.\n    review: string;\n}\n\nexport type Rating = 1|2|3|4|5;\n\n/**\n * The default rating text for each of the possible numerical ratings.\n */\nexport const DEFAULT_RATING_TEXTS = {\n    1: 'Very Bad!',\n    2: 'Bad',\n    3: 'Alright',\n    4: 'Good',\n    5: 'Very Good!',\n};\n\n/**\n * Renders the movie rating as text.\n *\n * @param movie\n */\nexport const renderRating = (movie: Movie): string =>\n    String(movie.rating) + '/5: ' + (movie.ratingText || DEFAULT_RATING_TEXTS[movie.rating]);\n\nexport default Movie;\n","/* General purpose sorting functions */\n\n// Sorts strings by their characters.\n// Implements the Array.sort compareFunction spec.\nexport const stringSorter = (a: string, b: string) => {\n    if (a > b) {\n        return 1;\n    } else if (a < b) {\n        return -1;\n    }\n    return 0;\n};","import React from 'react';\nimport Config from '../domain/Config';\n\n/**\n * Provides app configuration to any React component that desires it.\n */\nconst ConfigContext = React.createContext<Config>({\n    /* Provide some default values per React requirements, but users should never see this. */\n    title: 'You should never see this',\n    introduction: 'You should never see this',\n});\n\nexport default ConfigContext;","import { CloseOutlined } from '@ant-design/icons';\nimport { Button, Typography } from 'antd';\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport '../App.css';\nimport Movie, { renderRating } from '../../domain/Movie';\nimport moment from 'moment';\n\nconst { Text, Title } = Typography;\n\nexport interface Props {\n    movie: Movie;\n    // Called when the user clicks the close button.\n    onClose: () => void;\n}\n\nexport const TestIds = {\n    closeButton: 'close-button',\n}\n\nconst MovieDetails: React.FC<Props> = ({ movie, onClose }) =>\n        <div className={'movie-details'}>\n            <header>\n                <Title level={2}>{movie.title} ({movie.year})</Title>\n                <Button type={'text'} className={'close-button'} data-testid={TestIds.closeButton} onClick={onClose}>\n                    <CloseOutlined />\n                </Button>\n            </header>\n            <Title level={5}>Rating</Title>\n            <Text>{renderRating(movie)}</Text>\n            <Title level={5}>Director</Title>\n            <Text>{movie.director}</Text>\n            <Title level={5}>Review</Title>\n            <ReactMarkdown>{movie.review}</ReactMarkdown>\n            <Text type={'secondary'}>Reviewed {moment(movie.rateDate).format('LL')}.</Text>\n        </div>;\n\nexport default MovieDetails;\n","import React, { useContext, useEffect, useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Table, Typography } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport moment from 'moment';\n\nimport Movie, { renderRating } from '../domain/Movie';\nimport { MoviesResponse } from '../api/api';\nimport { stringSorter } from '../utils/sorting';\nimport ConfigContext from './ConfigContext';\nimport MovieDetails from './MovieDetails';\n\nconst { Title } = Typography;\n\nexport const TestIds = {\n    movieListTable: 'movie-list-table',\n};\n\nexport interface Props {\n    moviesData: MoviesResponse;\n}\n\nconst Introduction: React.FC = () => {\n    const config = useContext(ConfigContext);\n    return <div className={'introduction'}>\n        <Title level={2}>Introduction</Title>\n        <ReactMarkdown>{config.introduction}</ReactMarkdown>\n    </div>;\n};\n\n/**\n * The App with initial data loaded.\n *\n * @param props\n */\nconst LoadedApp: React.FC<Props> = ({ moviesData }) => {\n    const { config, movies } = moviesData;\n    const [selectedMovie, setSelectedMovie] = useState<Movie | null>(null);\n    useEffect(() => {\n        document.title = config.title;\n    });\n    const closeMovie = () => {\n        setSelectedMovie(null);\n    };\n\n    const columns: ColumnsType<Movie> = [\n        {\n            title: 'Title',\n            dataIndex: 'title',\n            sorter: (a, b) => stringSorter(a.title, b.title),\n        },\n        {\n            title: 'Year',\n            dataIndex: 'year',\n            defaultSortOrder: 'ascend',\n            sorter: (a, b) => stringSorter(a.year, b.year),\n        },\n        {\n            title: 'Director',\n            dataIndex: 'director',\n        },\n        {\n            title: 'Rating',\n            className: 'rating-column',\n            dataIndex: 'rating',\n            render: (_, movie) => renderRating(movie),\n            sorter: (a, b) => b.rating - a.rating,\n        },\n        {\n            title: 'Review Date',\n            className: 'review-date-column',\n            dataIndex: 'rateDate',\n            render: rateDate => moment(rateDate).format('l'),\n            sorter: (a, b) => stringSorter(a.rateDate, b.rateDate),\n        }\n    ];\n    // Don't show the Director column if we have a movie selected.\n    // Since the movie details panel is wider, it makes the list too crowded when it is open.\n    if (selectedMovie) {\n        columns.splice(2, 1);\n    }\n\n    return (\n        <ConfigContext.Provider value={config}>\n            <header><Title>{config.title}</Title></header>\n            <div className=\"main-content\">\n                <div className=\"movie-list\">\n                    <Table\n                        data-testid={TestIds.movieListTable}\n                        columns={columns}\n                        dataSource={movies}\n                        rowKey={(record => record.title + record.year)}\n                        onRow={record => ({\n                            onClick: () => setSelectedMovie(record),\n                        })}\n                    />\n                </div>\n                {selectedMovie ? <MovieDetails movie={selectedMovie} onClose={closeMovie} /> : <Introduction/>}\n            </div>\n            <footer>\n                {/* Should I use Ant 'secondary' typography here? I feel it's a little too translucent. */}\n                <a href='https://github.com/dgtombs/movierate' className={'source-repo-link'}><img src='GitHub-Mark-16px.png' alt='GitHub logo' /> Source Code</a>\n            </footer>\n        </ConfigContext.Provider>\n    );\n};\n\nexport default LoadedApp;\n","import { Spin } from 'antd';\nimport 'antd/dist/antd.css';\nimport React, { useState } from 'react';\n\nimport './App.css';\nimport LoadedApp from './LoadedApp';\nimport { getMovies, MoviesResponse } from '../api/api';\n\nconst App: React.FC = () => {\n    const [loading, setLoading] = useState<boolean>(true);\n    const [moviesResponse, setMoviesResponse] = useState<MoviesResponse|null>(null);\n\n    if (!moviesResponse) {\n        getMovies().then(response => {\n            setMoviesResponse(response);\n        }).finally(() => {\n            // Whether we succeeded or failed, we're done loading.\n            setLoading(false)\n        });\n    }\n\n    return (\n        <div className=\"App\">\n            {loading ?\n                <><Spin/> Loading...</> :\n                // If we finished loading but `movies` is null, that means we failed to load the movies.\n                moviesResponse ?\n                    <LoadedApp moviesData={moviesResponse} /> :\n                    <>Unable to load movie database. Please contact the site owner.</>\n            }\n        </div>\n    );\n};\n\nexport default App;\n","/*\n * Communication with backend API.\n *\n * For now this fits in one module. If it gets big, I'll split it up.\n */\n\nimport Movie from '../domain/Movie';\nimport Config from '../domain/Config';\n\n/**\n * Response object format from the movies.json endpoint.\n * This includes both app configuration and the movie list in order to reduce the number of requests needed to load the\n * app.\n */\nexport interface MoviesResponse {\n    config: Config;\n    movies: Movie[];\n}\n\nexport const getMovies = (): Promise<MoviesResponse> =>\n    fetch('api/movies.json').then(response => response.json());\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}