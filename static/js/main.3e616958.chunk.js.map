{"version":3,"sources":["domain/Movie.ts","components/MovieDetails/index.tsx","components/ConfigContext.ts","components/LoadedApp.tsx","components/App.tsx","api/api.ts","reportWebVitals.ts","index.tsx"],"names":["DEFAULT_RATING_TEXTS","1","2","3","4","5","renderRating","movie","String","rating","ratingText","Text","Typography","Title","MovieDetails","onClose","className","level","title","year","type","onClick","CloseOutlined","director","review","moment","rateDate","format","ConfigContext","React","createContext","introduction","TestIds","Introduction","config","useContext","LoadedApp","moviesData","movies","useState","selectedMovie","setSelectedMovie","useEffect","document","columns","dataIndex","render","_","splice","Provider","value","data-testid","dataSource","rowKey","record","onRow","href","src","alt","App","loading","setLoading","moviesResponse","setMoviesResponse","fetch","then","response","json","finally","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3e616958.chunk.js","sourcesContent":["interface Movie {\n    title: string;\n    year: string;\n    director: string;\n    // Date of the rating on YYYY-MM-DD format.\n    // I leave it in this format since it is sortable.\n    rateDate: string;\n    rating: Rating;\n    // If present, overrides the default text for the rating.\n    ratingText?: string;\n    // Markdown supported here.\n    review: string;\n}\n\nexport type Rating = 1|2|3|4|5;\n\n/**\n * The default rating text for each of the possible numerical ratings.\n */\nexport const DEFAULT_RATING_TEXTS = {\n    1: 'Very Bad!',\n    2: 'Bad',\n    3: 'Alright',\n    4: 'Good',\n    5: 'Very Good!',\n};\n\n/**\n * Renders the movie rating as text.\n *\n * @param movie\n */\nexport const renderRating = (movie: Movie): string =>\n    String(movie.rating) + '/5: ' + (movie.ratingText || DEFAULT_RATING_TEXTS[movie.rating]);\n\nexport default Movie;\n","import { CloseOutlined } from '@ant-design/icons';\nimport { Button, Typography } from 'antd';\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport '../App.css';\nimport Movie, { renderRating } from '../../domain/Movie';\nimport moment from 'moment';\n\nconst { Text, Title } = Typography;\n\nexport interface Props {\n    movie: Movie;\n    // Called when the user clicks the close button.\n    onClose: () => void;\n}\n\nconst MovieDetails: React.FC<Props> = ({ movie, onClose }) =>\n        <div className={'movie-details'}>\n            <header>\n                <Title level={2}>{movie.title} ({movie.year})</Title>\n                <Button type={'text'} className={'close-button'} onClick={onClose}><CloseOutlined /></Button>\n            </header>\n            <Title level={5}>Rating</Title>\n            <Text>{renderRating(movie)}</Text>\n            <Title level={5}>Director</Title>\n            <Text>{movie.director}</Text>\n            <Title level={5}>Review</Title>\n            <ReactMarkdown>{movie.review}</ReactMarkdown>\n            <Text type={'secondary'}>Reviewed {moment(movie.rateDate).format('LL')}.</Text>\n        </div>;\n\nexport default MovieDetails;\n","import React from 'react';\nimport Config from '../domain/Config';\n\n/**\n * Provides app configuration to any React component that desires it.\n */\nconst ConfigContext = React.createContext<Config>({\n    /* Provide some default values per React requirements, but users should never see this. */\n    title: 'You should never see this',\n    introduction: 'You should never see this',\n});\n\nexport default ConfigContext;","import React, { useContext, useEffect, useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Table, Typography } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\n\nimport Movie, { renderRating } from '../domain/Movie';\nimport MovieDetails from './MovieDetails';\nimport { MoviesResponse } from '../api/api';\nimport ConfigContext from './ConfigContext';\nimport moment from 'moment';\n\nconst { Title } = Typography;\n\nexport const TestIds = {\n    movieListTable: 'movie-list-table',\n};\n\nexport interface Props {\n    moviesData: MoviesResponse;\n}\n\nconst Introduction: React.FC = () => {\n    const config = useContext(ConfigContext);\n    return <div className={'introduction'}>\n        <Title level={2}>Introduction</Title>\n        <ReactMarkdown>{config.introduction}</ReactMarkdown>\n    </div>;\n};\n\n/**\n * The App with initial data loaded.\n *\n * @param props\n */\nconst LoadedApp: React.FC<Props> = ({ moviesData }) => {\n    const { config, movies } = moviesData;\n    const [selectedMovie, setSelectedMovie] = useState<Movie | null>(null);\n    useEffect(() => {\n        document.title = config.title;\n    });\n    const closeMovie = () => {\n        setSelectedMovie(null);\n    };\n\n    const columns: ColumnsType<Movie> = [\n        {\n            title: 'Title',\n            dataIndex: 'title',\n        },\n        {\n            title: 'Year',\n            dataIndex: 'year',\n        },\n        {\n            title: 'Director',\n            dataIndex: 'director',\n        },\n        {\n            title: 'Rating',\n            className: 'rating-column',\n            dataIndex: 'rating',\n            render: (_, movie) => renderRating(movie),\n        },\n        {\n            title: 'Review Date',\n            className: 'review-date-column',\n            dataIndex: 'rateDate',\n            render: rateDate => moment(rateDate).format('l'),\n        }\n    ];\n    // Don't show the Director column if we have a movie selected.\n    // Since the movie details panel is wider, it makes the list too crowded when it is open.\n    if (selectedMovie) {\n        columns.splice(2, 1);\n    }\n\n    return (\n        <ConfigContext.Provider value={config}>\n            <header><Title>{config.title}</Title></header>\n            <div className=\"main-content\">\n                <div className=\"movie-list\">\n                    <Table\n                        data-testid={TestIds.movieListTable}\n                        columns={columns}\n                        dataSource={movies}\n                        rowKey={(record => record.title + record.year)}\n                        onRow={record => ({\n                            onClick: () => setSelectedMovie(record),\n                        })}\n                    />\n                </div>\n                {selectedMovie ? <MovieDetails movie={selectedMovie} onClose={closeMovie} /> : <Introduction/>}\n            </div>\n            <footer>\n                {/* Should I use Ant 'secondary' typography here? I feel it's a little too translucent. */}\n                <a href='https://github.com/dgtombs/movierate' className={'source-repo-link'}><img src='GitHub-Mark-16px.png' alt='GitHub logo' /> Source Code</a>\n            </footer>\n        </ConfigContext.Provider>\n    );\n};\n\nexport default LoadedApp;\n","import { Spin } from 'antd';\nimport 'antd/dist/antd.css';\nimport React, { useState } from 'react';\n\nimport './App.css';\nimport LoadedApp from './LoadedApp';\nimport { getMovies, MoviesResponse } from '../api/api';\n\nconst App: React.FC = () => {\n    const [loading, setLoading] = useState<boolean>(true);\n    const [moviesResponse, setMoviesResponse] = useState<MoviesResponse|null>(null);\n\n    if (!moviesResponse) {\n        getMovies().then(response => {\n            setMoviesResponse(response);\n        }).finally(() => {\n            // Whether we succeeded or failed, we're done loading.\n            setLoading(false)\n        });\n    }\n\n    return (\n        <div className=\"App\">\n            {loading ?\n                <><Spin/> Loading...</> :\n                // If we finished loading but `movies` is null, that means we failed to load the movies.\n                moviesResponse ?\n                    <LoadedApp moviesData={moviesResponse} /> :\n                    <>Unable to load movie database. Please contact the site owner.</>\n            }\n        </div>\n    );\n};\n\nexport default App;\n","/*\n * Communication with backend API.\n *\n * For now this fits in one module. If it gets big, I'll split it up.\n */\n\nimport Movie from '../domain/Movie';\nimport Config from '../domain/Config';\n\n/**\n * Response object format from the movies.json endpoint.\n * This includes both app configuration and the movie list in order to reduce the number of requests needed to load the\n * app.\n */\nexport interface MoviesResponse {\n    config: Config;\n    movies: Movie[];\n}\n\nexport const getMovies = (): Promise<MoviesResponse> =>\n    fetch('api/movies.json').then(response => response.json());\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}