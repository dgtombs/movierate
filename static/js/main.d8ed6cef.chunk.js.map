{"version":3,"sources":["domain/Movie.ts","components/MovieDetails/index.tsx","components/ConfigContext.ts","components/LoadedApp.tsx","components/App.tsx","api/api.ts","reportWebVitals.ts","index.tsx"],"names":["DEFAULT_RATING_TEXTS","1","2","3","4","5","renderRating","movie","String","rating","ratingText","Text","Typography","Title","MovieDetails","className","level","title","year","director","review","ConfigContext","React","createContext","introduction","TestIds","columns","dataIndex","render","_","Introduction","config","useContext","LoadedApp","moviesData","movies","useState","selectedMovie","setSelectedMovie","useEffect","document","Provider","value","data-testid","dataSource","rowKey","record","onRow","onClick","href","src","alt","App","loading","setLoading","moviesResponse","setMoviesResponse","fetch","then","response","json","finally","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d8ed6cef.chunk.js","sourcesContent":["interface Movie {\n    title: string;\n    year: string;\n    director: string;\n    rating: Rating;\n    // If present, overrides the default text for the rating.\n    ratingText?: string;\n    // Markdown supported here.\n    review: string;\n}\n\nexport type Rating = 1|2|3|4|5;\n\n/**\n * The default rating text for each of the possible numerical ratings.\n */\nexport const DEFAULT_RATING_TEXTS = {\n    1: 'Very Bad!',\n    2: 'Bad',\n    3: 'Alright',\n    4: 'Good',\n    5: 'Very Good!',\n};\n\n/**\n * Renders the movie rating as text.\n *\n * @param movie\n */\nexport const renderRating = (movie: Movie): string =>\n    String(movie.rating) + '/5: ' + (movie.ratingText || DEFAULT_RATING_TEXTS[movie.rating]);\n\nexport default Movie;\n","import { Typography } from 'antd';\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport '../App.css';\nimport Movie, { renderRating } from '../../domain/Movie';\n\nconst { Text, Title } = Typography;\n\nexport interface Props {\n    movie: Movie;\n}\n\nconst MovieDetails: React.FC<Props> = ({ movie }) =>\n        <div className={'movie-details'}>\n            <Title level={2}>{movie.title} ({movie.year})</Title>\n            <Title level={5}>Rating</Title>\n            <Text>{renderRating(movie)}</Text>\n            <Title level={5}>Director</Title>\n            <Text>{movie.director}</Text>\n            <Title level={5}>Review</Title>\n            <ReactMarkdown>{movie.review}</ReactMarkdown>\n        </div>;\n\nexport default MovieDetails;\n","import React from 'react';\nimport Config from '../domain/Config';\n\n/**\n * Provides app configuration to any React component that desires it.\n */\nconst ConfigContext = React.createContext<Config>({\n    /* Provide some default values per React requirements, but users should never see this. */\n    title: 'You should never see this',\n    introduction: 'You should never see this',\n});\n\nexport default ConfigContext;","import React, { useContext, useEffect, useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Table, Typography } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\n\nimport Movie, { renderRating } from '../domain/Movie';\nimport MovieDetails from './MovieDetails';\nimport { MoviesResponse } from '../api/api';\nimport ConfigContext from './ConfigContext';\n\nconst { Title } = Typography;\n\nexport const TestIds = {\n    movieListTable: 'movie-list-table',\n};\n\nexport interface Props {\n    moviesData: MoviesResponse;\n}\n\nconst columns: ColumnsType<Movie> = [\n    {\n        title: 'Title',\n        dataIndex: 'title',\n    },\n    {\n        title: 'Year',\n        dataIndex: 'year',\n    },\n    {\n        title: 'Director',\n        dataIndex: 'director',\n    },\n    {\n        title: 'Rating',\n        dataIndex: 'rating',\n        render: (_, movie) => renderRating(movie),\n    },\n];\n\nconst Introduction: React.FC = () => {\n    const config = useContext(ConfigContext);\n    return <div className={'introduction'}>\n        <Title level={2}>Introduction</Title>\n        <ReactMarkdown>{config.introduction}</ReactMarkdown>\n    </div>;\n};\n\n/**\n * The App with initial data loaded.\n *\n * @param props\n */\nconst LoadedApp: React.FC<Props> = ({ moviesData }) => {\n    const { config, movies } = moviesData;\n    const [selectedMovie, setSelectedMovie] = useState<Movie | null>(null);\n    useEffect(() => {\n        document.title = config.title;\n    });\n    return (\n        <ConfigContext.Provider value={config}>\n            <header><Title>{config.title}</Title></header>\n            <div className=\"main-content\">\n                <div className=\"movie-list\">\n                    <Table\n                        data-testid={TestIds.movieListTable}\n                        columns={columns}\n                        dataSource={movies}\n                        rowKey={(record => record.title + record.year)}\n                        onRow={record => ({\n                            onClick: () => setSelectedMovie(record),\n                        })}\n                    />\n                </div>\n                {selectedMovie ? <MovieDetails movie={selectedMovie}/> : <Introduction/>}\n            </div>\n            <footer>\n                {/* Should I use Ant 'secondary' typography here? I feel it's a little too translucent. */}\n                <a href='https://github.com/dgtombs/movierate' className={'source-repo-link'}><img src='GitHub-Mark-16px.png' alt='GitHub logo' /> Source Code</a>\n            </footer>\n        </ConfigContext.Provider>\n    );\n};\n\nexport default LoadedApp;\n","import { Spin } from 'antd';\nimport 'antd/dist/antd.css';\nimport React, { useState } from 'react';\n\nimport './App.css';\nimport LoadedApp from './LoadedApp';\nimport { getMovies, MoviesResponse } from '../api/api';\n\nconst App: React.FC = () => {\n    const [loading, setLoading] = useState<boolean>(true);\n    const [moviesResponse, setMoviesResponse] = useState<MoviesResponse|null>(null);\n\n    if (!moviesResponse) {\n        getMovies().then(response => {\n            setMoviesResponse(response);\n        }).finally(() => {\n            // Whether we succeeded or failed, we're done loading.\n            setLoading(false)\n        });\n    }\n\n    return (\n        <div className=\"App\">\n            {loading ?\n                <><Spin/> Loading...</> :\n                // If we finished loading but `movies` is null, that means we failed to load the movies.\n                moviesResponse ?\n                    <LoadedApp moviesData={moviesResponse} /> :\n                    <>Unable to load movie database. Please contact the site owner.</>\n            }\n        </div>\n    );\n};\n\nexport default App;\n","/*\n * Communication with backend API.\n *\n * For now this fits in one module. If it gets big, I'll split it up.\n */\n\nimport Movie from '../domain/Movie';\nimport Config from '../domain/Config';\n\n/**\n * Response object format from the movies.json endpoint.\n * This includes both app configuration and the movie list in order to reduce the number of requests needed to load the\n * app.\n */\nexport interface MoviesResponse {\n    config: Config;\n    movies: Movie[];\n}\n\nexport const getMovies = (): Promise<MoviesResponse> =>\n    fetch('api/movies.json').then(response => response.json());\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}